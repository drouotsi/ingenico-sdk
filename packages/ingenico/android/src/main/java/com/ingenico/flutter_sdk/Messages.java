// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.ingenico.flutter_sdk;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  public enum Type {
    string(0),
    integer(1),
    numericstring(2),
    expirydate(3),
    booleanEnum(4),
    date(5);

    private int index;
    private Type(final int index) {
      this.index = index;
    }
  }

  public enum PreferredInputType {
    integerKeyboard(0),
    stringKeyboard(1),
    phoneNumberKeyboard(2),
    emailAddressKeyboard(3),
    dateKeyboard(4);

    private int index;
    private PreferredInputType(final int index) {
      this.index = index;
    }
  }

  public enum ListType {
    text(0),
    list(1),
    currency(2),
    date(3),
    booleanEnum(4);

    private int index;
    private ListType(final int index) {
      this.index = index;
    }
  }

  public enum PaymentProductFieldDisplayElementType {
    integer(0),
    string(1),
    currency(2),
    percentage(3),
    uri(4);

    private int index;
    private PaymentProductFieldDisplayElementType(final int index) {
      this.index = index;
    }
  }

  public enum ValidationType {
    expirationDate(0),
    emailAdress(1),
    fixedList(2),
    iban(3),
    length(4),
    luhn(5),
    range(6),
    regularExpression(7),
    type(8),
    termsAndConditions(9);

    private int index;
    private ValidationType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SessionRequest {
    private @NonNull String clientSessionId;
    public @NonNull String getClientSessionId() { return clientSessionId; }
    public void setClientSessionId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"clientSessionId\" is null.");
      }
      this.clientSessionId = setterArg;
    }

    private @NonNull String customerId;
    public @NonNull String getCustomerId() { return customerId; }
    public void setCustomerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"customerId\" is null.");
      }
      this.customerId = setterArg;
    }

    private @NonNull String clientApiUrl;
    public @NonNull String getClientApiUrl() { return clientApiUrl; }
    public void setClientApiUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"clientApiUrl\" is null.");
      }
      this.clientApiUrl = setterArg;
    }

    private @NonNull String assetBaseUrl;
    public @NonNull String getAssetBaseUrl() { return assetBaseUrl; }
    public void setAssetBaseUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"assetBaseUrl\" is null.");
      }
      this.assetBaseUrl = setterArg;
    }

    private @NonNull Boolean environmentIsProduction;
    public @NonNull Boolean getEnvironmentIsProduction() { return environmentIsProduction; }
    public void setEnvironmentIsProduction(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"environmentIsProduction\" is null.");
      }
      this.environmentIsProduction = setterArg;
    }

    private @NonNull String applicationIdentifier;
    public @NonNull String getApplicationIdentifier() { return applicationIdentifier; }
    public void setApplicationIdentifier(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"applicationIdentifier\" is null.");
      }
      this.applicationIdentifier = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SessionRequest() {}
    public static final class Builder {
      private @Nullable String clientSessionId;
      public @NonNull Builder setClientSessionId(@NonNull String setterArg) {
        this.clientSessionId = setterArg;
        return this;
      }
      private @Nullable String customerId;
      public @NonNull Builder setCustomerId(@NonNull String setterArg) {
        this.customerId = setterArg;
        return this;
      }
      private @Nullable String clientApiUrl;
      public @NonNull Builder setClientApiUrl(@NonNull String setterArg) {
        this.clientApiUrl = setterArg;
        return this;
      }
      private @Nullable String assetBaseUrl;
      public @NonNull Builder setAssetBaseUrl(@NonNull String setterArg) {
        this.assetBaseUrl = setterArg;
        return this;
      }
      private @Nullable Boolean environmentIsProduction;
      public @NonNull Builder setEnvironmentIsProduction(@NonNull Boolean setterArg) {
        this.environmentIsProduction = setterArg;
        return this;
      }
      private @Nullable String applicationIdentifier;
      public @NonNull Builder setApplicationIdentifier(@NonNull String setterArg) {
        this.applicationIdentifier = setterArg;
        return this;
      }
      public @NonNull SessionRequest build() {
        SessionRequest pigeonReturn = new SessionRequest();
        pigeonReturn.setClientSessionId(clientSessionId);
        pigeonReturn.setCustomerId(customerId);
        pigeonReturn.setClientApiUrl(clientApiUrl);
        pigeonReturn.setAssetBaseUrl(assetBaseUrl);
        pigeonReturn.setEnvironmentIsProduction(environmentIsProduction);
        pigeonReturn.setApplicationIdentifier(applicationIdentifier);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("clientSessionId", clientSessionId);
      toMapResult.put("customerId", customerId);
      toMapResult.put("clientApiUrl", clientApiUrl);
      toMapResult.put("assetBaseUrl", assetBaseUrl);
      toMapResult.put("environmentIsProduction", environmentIsProduction);
      toMapResult.put("applicationIdentifier", applicationIdentifier);
      return toMapResult;
    }
    static @NonNull SessionRequest fromMap(@NonNull Map<String, Object> map) {
      SessionRequest pigeonResult = new SessionRequest();
      Object clientSessionId = map.get("clientSessionId");
      pigeonResult.setClientSessionId((String)clientSessionId);
      Object customerId = map.get("customerId");
      pigeonResult.setCustomerId((String)customerId);
      Object clientApiUrl = map.get("clientApiUrl");
      pigeonResult.setClientApiUrl((String)clientApiUrl);
      Object assetBaseUrl = map.get("assetBaseUrl");
      pigeonResult.setAssetBaseUrl((String)assetBaseUrl);
      Object environmentIsProduction = map.get("environmentIsProduction");
      pigeonResult.setEnvironmentIsProduction((Boolean)environmentIsProduction);
      Object applicationIdentifier = map.get("applicationIdentifier");
      pigeonResult.setApplicationIdentifier((String)applicationIdentifier);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SessionResponse {
    private @NonNull String sessionId;
    public @NonNull String getSessionId() { return sessionId; }
    public void setSessionId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionId\" is null.");
      }
      this.sessionId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SessionResponse() {}
    public static final class Builder {
      private @Nullable String sessionId;
      public @NonNull Builder setSessionId(@NonNull String setterArg) {
        this.sessionId = setterArg;
        return this;
      }
      public @NonNull SessionResponse build() {
        SessionResponse pigeonReturn = new SessionResponse();
        pigeonReturn.setSessionId(sessionId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sessionId", sessionId);
      return toMapResult;
    }
    static @NonNull SessionResponse fromMap(@NonNull Map<String, Object> map) {
      SessionResponse pigeonResult = new SessionResponse();
      Object sessionId = map.get("sessionId");
      pigeonResult.setSessionId((String)sessionId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentContextRequest {
    private @NonNull String sessionId;
    public @NonNull String getSessionId() { return sessionId; }
    public void setSessionId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionId\" is null.");
      }
      this.sessionId = setterArg;
    }

    private @NonNull Double amountValue;
    public @NonNull Double getAmountValue() { return amountValue; }
    public void setAmountValue(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"amountValue\" is null.");
      }
      this.amountValue = setterArg;
    }

    private @NonNull String currencyCode;
    public @NonNull String getCurrencyCode() { return currencyCode; }
    public void setCurrencyCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"currencyCode\" is null.");
      }
      this.currencyCode = setterArg;
    }

    private @NonNull String countryCode;
    public @NonNull String getCountryCode() { return countryCode; }
    public void setCountryCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"countryCode\" is null.");
      }
      this.countryCode = setterArg;
    }

    private @NonNull Boolean isRecurring;
    public @NonNull Boolean getIsRecurring() { return isRecurring; }
    public void setIsRecurring(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isRecurring\" is null.");
      }
      this.isRecurring = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PaymentContextRequest() {}
    public static final class Builder {
      private @Nullable String sessionId;
      public @NonNull Builder setSessionId(@NonNull String setterArg) {
        this.sessionId = setterArg;
        return this;
      }
      private @Nullable Double amountValue;
      public @NonNull Builder setAmountValue(@NonNull Double setterArg) {
        this.amountValue = setterArg;
        return this;
      }
      private @Nullable String currencyCode;
      public @NonNull Builder setCurrencyCode(@NonNull String setterArg) {
        this.currencyCode = setterArg;
        return this;
      }
      private @Nullable String countryCode;
      public @NonNull Builder setCountryCode(@NonNull String setterArg) {
        this.countryCode = setterArg;
        return this;
      }
      private @Nullable Boolean isRecurring;
      public @NonNull Builder setIsRecurring(@NonNull Boolean setterArg) {
        this.isRecurring = setterArg;
        return this;
      }
      public @NonNull PaymentContextRequest build() {
        PaymentContextRequest pigeonReturn = new PaymentContextRequest();
        pigeonReturn.setSessionId(sessionId);
        pigeonReturn.setAmountValue(amountValue);
        pigeonReturn.setCurrencyCode(currencyCode);
        pigeonReturn.setCountryCode(countryCode);
        pigeonReturn.setIsRecurring(isRecurring);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sessionId", sessionId);
      toMapResult.put("amountValue", amountValue);
      toMapResult.put("currencyCode", currencyCode);
      toMapResult.put("countryCode", countryCode);
      toMapResult.put("isRecurring", isRecurring);
      return toMapResult;
    }
    static @NonNull PaymentContextRequest fromMap(@NonNull Map<String, Object> map) {
      PaymentContextRequest pigeonResult = new PaymentContextRequest();
      Object sessionId = map.get("sessionId");
      pigeonResult.setSessionId((String)sessionId);
      Object amountValue = map.get("amountValue");
      pigeonResult.setAmountValue((Double)amountValue);
      Object currencyCode = map.get("currencyCode");
      pigeonResult.setCurrencyCode((String)currencyCode);
      Object countryCode = map.get("countryCode");
      pigeonResult.setCountryCode((String)countryCode);
      Object isRecurring = map.get("isRecurring");
      pigeonResult.setIsRecurring((Boolean)isRecurring);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetPaymentProductRequest {
    private @NonNull String sessionId;
    public @NonNull String getSessionId() { return sessionId; }
    public void setSessionId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionId\" is null.");
      }
      this.sessionId = setterArg;
    }

    private @NonNull String paymentProductId;
    public @NonNull String getPaymentProductId() { return paymentProductId; }
    public void setPaymentProductId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"paymentProductId\" is null.");
      }
      this.paymentProductId = setterArg;
    }

    private @NonNull Double amountValue;
    public @NonNull Double getAmountValue() { return amountValue; }
    public void setAmountValue(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"amountValue\" is null.");
      }
      this.amountValue = setterArg;
    }

    private @NonNull String currencyCode;
    public @NonNull String getCurrencyCode() { return currencyCode; }
    public void setCurrencyCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"currencyCode\" is null.");
      }
      this.currencyCode = setterArg;
    }

    private @NonNull String countryCode;
    public @NonNull String getCountryCode() { return countryCode; }
    public void setCountryCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"countryCode\" is null.");
      }
      this.countryCode = setterArg;
    }

    private @NonNull Boolean isRecurring;
    public @NonNull Boolean getIsRecurring() { return isRecurring; }
    public void setIsRecurring(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isRecurring\" is null.");
      }
      this.isRecurring = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private GetPaymentProductRequest() {}
    public static final class Builder {
      private @Nullable String sessionId;
      public @NonNull Builder setSessionId(@NonNull String setterArg) {
        this.sessionId = setterArg;
        return this;
      }
      private @Nullable String paymentProductId;
      public @NonNull Builder setPaymentProductId(@NonNull String setterArg) {
        this.paymentProductId = setterArg;
        return this;
      }
      private @Nullable Double amountValue;
      public @NonNull Builder setAmountValue(@NonNull Double setterArg) {
        this.amountValue = setterArg;
        return this;
      }
      private @Nullable String currencyCode;
      public @NonNull Builder setCurrencyCode(@NonNull String setterArg) {
        this.currencyCode = setterArg;
        return this;
      }
      private @Nullable String countryCode;
      public @NonNull Builder setCountryCode(@NonNull String setterArg) {
        this.countryCode = setterArg;
        return this;
      }
      private @Nullable Boolean isRecurring;
      public @NonNull Builder setIsRecurring(@NonNull Boolean setterArg) {
        this.isRecurring = setterArg;
        return this;
      }
      public @NonNull GetPaymentProductRequest build() {
        GetPaymentProductRequest pigeonReturn = new GetPaymentProductRequest();
        pigeonReturn.setSessionId(sessionId);
        pigeonReturn.setPaymentProductId(paymentProductId);
        pigeonReturn.setAmountValue(amountValue);
        pigeonReturn.setCurrencyCode(currencyCode);
        pigeonReturn.setCountryCode(countryCode);
        pigeonReturn.setIsRecurring(isRecurring);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sessionId", sessionId);
      toMapResult.put("paymentProductId", paymentProductId);
      toMapResult.put("amountValue", amountValue);
      toMapResult.put("currencyCode", currencyCode);
      toMapResult.put("countryCode", countryCode);
      toMapResult.put("isRecurring", isRecurring);
      return toMapResult;
    }
    static @NonNull GetPaymentProductRequest fromMap(@NonNull Map<String, Object> map) {
      GetPaymentProductRequest pigeonResult = new GetPaymentProductRequest();
      Object sessionId = map.get("sessionId");
      pigeonResult.setSessionId((String)sessionId);
      Object paymentProductId = map.get("paymentProductId");
      pigeonResult.setPaymentProductId((String)paymentProductId);
      Object amountValue = map.get("amountValue");
      pigeonResult.setAmountValue((Double)amountValue);
      Object currencyCode = map.get("currencyCode");
      pigeonResult.setCurrencyCode((String)currencyCode);
      Object countryCode = map.get("countryCode");
      pigeonResult.setCountryCode((String)countryCode);
      Object isRecurring = map.get("isRecurring");
      pigeonResult.setIsRecurring((Boolean)isRecurring);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentContextResponse {
    private @NonNull List<BasicPaymentProduct> basicPaymentProduct;
    public @NonNull List<BasicPaymentProduct> getBasicPaymentProduct() { return basicPaymentProduct; }
    public void setBasicPaymentProduct(@NonNull List<BasicPaymentProduct> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"basicPaymentProduct\" is null.");
      }
      this.basicPaymentProduct = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PaymentContextResponse() {}
    public static final class Builder {
      private @Nullable List<BasicPaymentProduct> basicPaymentProduct;
      public @NonNull Builder setBasicPaymentProduct(@NonNull List<BasicPaymentProduct> setterArg) {
        this.basicPaymentProduct = setterArg;
        return this;
      }
      public @NonNull PaymentContextResponse build() {
        PaymentContextResponse pigeonReturn = new PaymentContextResponse();
        pigeonReturn.setBasicPaymentProduct(basicPaymentProduct);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("basicPaymentProduct", basicPaymentProduct);
      return toMapResult;
    }
    static @NonNull PaymentContextResponse fromMap(@NonNull Map<String, Object> map) {
      PaymentContextResponse pigeonResult = new PaymentContextResponse();
      Object basicPaymentProduct = map.get("basicPaymentProduct");
      pigeonResult.setBasicPaymentProduct((List<BasicPaymentProduct>)basicPaymentProduct);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BasicPaymentProduct {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String paymentMethod;
    public @Nullable String getPaymentMethod() { return paymentMethod; }
    public void setPaymentMethod(@Nullable String setterArg) {
      this.paymentMethod = setterArg;
    }

    private @Nullable String paymentProductGroup;
    public @Nullable String getPaymentProductGroup() { return paymentProductGroup; }
    public void setPaymentProductGroup(@Nullable String setterArg) {
      this.paymentProductGroup = setterArg;
    }

    private @Nullable Double minAmount;
    public @Nullable Double getMinAmount() { return minAmount; }
    public void setMinAmount(@Nullable Double setterArg) {
      this.minAmount = setterArg;
    }

    private @Nullable Double maxAmount;
    public @Nullable Double getMaxAmount() { return maxAmount; }
    public void setMaxAmount(@Nullable Double setterArg) {
      this.maxAmount = setterArg;
    }

    private @Nullable Boolean allowsRecurring;
    public @Nullable Boolean getAllowsRecurring() { return allowsRecurring; }
    public void setAllowsRecurring(@Nullable Boolean setterArg) {
      this.allowsRecurring = setterArg;
    }

    private @Nullable Boolean allowsTokenization;
    public @Nullable Boolean getAllowsTokenization() { return allowsTokenization; }
    public void setAllowsTokenization(@Nullable Boolean setterArg) {
      this.allowsTokenization = setterArg;
    }

    private @Nullable Boolean usesRedirectionTo3rdParty;
    public @Nullable Boolean getUsesRedirectionTo3rdParty() { return usesRedirectionTo3rdParty; }
    public void setUsesRedirectionTo3rdParty(@Nullable Boolean setterArg) {
      this.usesRedirectionTo3rdParty = setterArg;
    }

    private @Nullable DisplayHintsPaymentItem displayHints;
    public @Nullable DisplayHintsPaymentItem getDisplayHints() { return displayHints; }
    public void setDisplayHints(@Nullable DisplayHintsPaymentItem setterArg) {
      this.displayHints = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private BasicPaymentProduct() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String paymentMethod;
      public @NonNull Builder setPaymentMethod(@Nullable String setterArg) {
        this.paymentMethod = setterArg;
        return this;
      }
      private @Nullable String paymentProductGroup;
      public @NonNull Builder setPaymentProductGroup(@Nullable String setterArg) {
        this.paymentProductGroup = setterArg;
        return this;
      }
      private @Nullable Double minAmount;
      public @NonNull Builder setMinAmount(@Nullable Double setterArg) {
        this.minAmount = setterArg;
        return this;
      }
      private @Nullable Double maxAmount;
      public @NonNull Builder setMaxAmount(@Nullable Double setterArg) {
        this.maxAmount = setterArg;
        return this;
      }
      private @Nullable Boolean allowsRecurring;
      public @NonNull Builder setAllowsRecurring(@Nullable Boolean setterArg) {
        this.allowsRecurring = setterArg;
        return this;
      }
      private @Nullable Boolean allowsTokenization;
      public @NonNull Builder setAllowsTokenization(@Nullable Boolean setterArg) {
        this.allowsTokenization = setterArg;
        return this;
      }
      private @Nullable Boolean usesRedirectionTo3rdParty;
      public @NonNull Builder setUsesRedirectionTo3rdParty(@Nullable Boolean setterArg) {
        this.usesRedirectionTo3rdParty = setterArg;
        return this;
      }
      private @Nullable DisplayHintsPaymentItem displayHints;
      public @NonNull Builder setDisplayHints(@Nullable DisplayHintsPaymentItem setterArg) {
        this.displayHints = setterArg;
        return this;
      }
      public @NonNull BasicPaymentProduct build() {
        BasicPaymentProduct pigeonReturn = new BasicPaymentProduct();
        pigeonReturn.setId(id);
        pigeonReturn.setPaymentMethod(paymentMethod);
        pigeonReturn.setPaymentProductGroup(paymentProductGroup);
        pigeonReturn.setMinAmount(minAmount);
        pigeonReturn.setMaxAmount(maxAmount);
        pigeonReturn.setAllowsRecurring(allowsRecurring);
        pigeonReturn.setAllowsTokenization(allowsTokenization);
        pigeonReturn.setUsesRedirectionTo3rdParty(usesRedirectionTo3rdParty);
        pigeonReturn.setDisplayHints(displayHints);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("paymentMethod", paymentMethod);
      toMapResult.put("paymentProductGroup", paymentProductGroup);
      toMapResult.put("minAmount", minAmount);
      toMapResult.put("maxAmount", maxAmount);
      toMapResult.put("allowsRecurring", allowsRecurring);
      toMapResult.put("allowsTokenization", allowsTokenization);
      toMapResult.put("usesRedirectionTo3rdParty", usesRedirectionTo3rdParty);
      toMapResult.put("displayHints", (displayHints == null) ? null : displayHints.toMap());
      return toMapResult;
    }
    static @NonNull BasicPaymentProduct fromMap(@NonNull Map<String, Object> map) {
      BasicPaymentProduct pigeonResult = new BasicPaymentProduct();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object paymentMethod = map.get("paymentMethod");
      pigeonResult.setPaymentMethod((String)paymentMethod);
      Object paymentProductGroup = map.get("paymentProductGroup");
      pigeonResult.setPaymentProductGroup((String)paymentProductGroup);
      Object minAmount = map.get("minAmount");
      pigeonResult.setMinAmount((Double)minAmount);
      Object maxAmount = map.get("maxAmount");
      pigeonResult.setMaxAmount((Double)maxAmount);
      Object allowsRecurring = map.get("allowsRecurring");
      pigeonResult.setAllowsRecurring((Boolean)allowsRecurring);
      Object allowsTokenization = map.get("allowsTokenization");
      pigeonResult.setAllowsTokenization((Boolean)allowsTokenization);
      Object usesRedirectionTo3rdParty = map.get("usesRedirectionTo3rdParty");
      pigeonResult.setUsesRedirectionTo3rdParty((Boolean)usesRedirectionTo3rdParty);
      Object displayHints = map.get("displayHints");
      pigeonResult.setDisplayHints((displayHints == null) ? null : DisplayHintsPaymentItem.fromMap((Map)displayHints));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DisplayHintsPaymentItem {
    private @NonNull Long displayOrder;
    public @NonNull Long getDisplayOrder() { return displayOrder; }
    public void setDisplayOrder(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"displayOrder\" is null.");
      }
      this.displayOrder = setterArg;
    }

    private @NonNull String label;
    public @NonNull String getLabel() { return label; }
    public void setLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"label\" is null.");
      }
      this.label = setterArg;
    }

    private @NonNull String logoUrl;
    public @NonNull String getLogoUrl() { return logoUrl; }
    public void setLogoUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"logoUrl\" is null.");
      }
      this.logoUrl = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DisplayHintsPaymentItem() {}
    public static final class Builder {
      private @Nullable Long displayOrder;
      public @NonNull Builder setDisplayOrder(@NonNull Long setterArg) {
        this.displayOrder = setterArg;
        return this;
      }
      private @Nullable String label;
      public @NonNull Builder setLabel(@NonNull String setterArg) {
        this.label = setterArg;
        return this;
      }
      private @Nullable String logoUrl;
      public @NonNull Builder setLogoUrl(@NonNull String setterArg) {
        this.logoUrl = setterArg;
        return this;
      }
      public @NonNull DisplayHintsPaymentItem build() {
        DisplayHintsPaymentItem pigeonReturn = new DisplayHintsPaymentItem();
        pigeonReturn.setDisplayOrder(displayOrder);
        pigeonReturn.setLabel(label);
        pigeonReturn.setLogoUrl(logoUrl);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("displayOrder", displayOrder);
      toMapResult.put("label", label);
      toMapResult.put("logoUrl", logoUrl);
      return toMapResult;
    }
    static @NonNull DisplayHintsPaymentItem fromMap(@NonNull Map<String, Object> map) {
      DisplayHintsPaymentItem pigeonResult = new DisplayHintsPaymentItem();
      Object displayOrder = map.get("displayOrder");
      pigeonResult.setDisplayOrder((displayOrder == null) ? null : ((displayOrder instanceof Integer) ? (Integer)displayOrder : (Long)displayOrder));
      Object label = map.get("label");
      pigeonResult.setLabel((String)label);
      Object logoUrl = map.get("logoUrl");
      pigeonResult.setLogoUrl((String)logoUrl);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentProduct {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String paymentMethod;
    public @Nullable String getPaymentMethod() { return paymentMethod; }
    public void setPaymentMethod(@Nullable String setterArg) {
      this.paymentMethod = setterArg;
    }

    private @Nullable String paymentProductGroup;
    public @Nullable String getPaymentProductGroup() { return paymentProductGroup; }
    public void setPaymentProductGroup(@Nullable String setterArg) {
      this.paymentProductGroup = setterArg;
    }

    private @Nullable Double minAmount;
    public @Nullable Double getMinAmount() { return minAmount; }
    public void setMinAmount(@Nullable Double setterArg) {
      this.minAmount = setterArg;
    }

    private @Nullable Double maxAmount;
    public @Nullable Double getMaxAmount() { return maxAmount; }
    public void setMaxAmount(@Nullable Double setterArg) {
      this.maxAmount = setterArg;
    }

    private @Nullable Boolean allowsRecurring;
    public @Nullable Boolean getAllowsRecurring() { return allowsRecurring; }
    public void setAllowsRecurring(@Nullable Boolean setterArg) {
      this.allowsRecurring = setterArg;
    }

    private @Nullable Boolean allowsTokenization;
    public @Nullable Boolean getAllowsTokenization() { return allowsTokenization; }
    public void setAllowsTokenization(@Nullable Boolean setterArg) {
      this.allowsTokenization = setterArg;
    }

    private @Nullable Boolean usesRedirectionTo3rdParty;
    public @Nullable Boolean getUsesRedirectionTo3rdParty() { return usesRedirectionTo3rdParty; }
    public void setUsesRedirectionTo3rdParty(@Nullable Boolean setterArg) {
      this.usesRedirectionTo3rdParty = setterArg;
    }

    private @Nullable DisplayHintsPaymentItem displayHints;
    public @Nullable DisplayHintsPaymentItem getDisplayHints() { return displayHints; }
    public void setDisplayHints(@Nullable DisplayHintsPaymentItem setterArg) {
      this.displayHints = setterArg;
    }

    private @NonNull List<PaymentProductField> fields;
    public @NonNull List<PaymentProductField> getFields() { return fields; }
    public void setFields(@NonNull List<PaymentProductField> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fields\" is null.");
      }
      this.fields = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PaymentProduct() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String paymentMethod;
      public @NonNull Builder setPaymentMethod(@Nullable String setterArg) {
        this.paymentMethod = setterArg;
        return this;
      }
      private @Nullable String paymentProductGroup;
      public @NonNull Builder setPaymentProductGroup(@Nullable String setterArg) {
        this.paymentProductGroup = setterArg;
        return this;
      }
      private @Nullable Double minAmount;
      public @NonNull Builder setMinAmount(@Nullable Double setterArg) {
        this.minAmount = setterArg;
        return this;
      }
      private @Nullable Double maxAmount;
      public @NonNull Builder setMaxAmount(@Nullable Double setterArg) {
        this.maxAmount = setterArg;
        return this;
      }
      private @Nullable Boolean allowsRecurring;
      public @NonNull Builder setAllowsRecurring(@Nullable Boolean setterArg) {
        this.allowsRecurring = setterArg;
        return this;
      }
      private @Nullable Boolean allowsTokenization;
      public @NonNull Builder setAllowsTokenization(@Nullable Boolean setterArg) {
        this.allowsTokenization = setterArg;
        return this;
      }
      private @Nullable Boolean usesRedirectionTo3rdParty;
      public @NonNull Builder setUsesRedirectionTo3rdParty(@Nullable Boolean setterArg) {
        this.usesRedirectionTo3rdParty = setterArg;
        return this;
      }
      private @Nullable DisplayHintsPaymentItem displayHints;
      public @NonNull Builder setDisplayHints(@Nullable DisplayHintsPaymentItem setterArg) {
        this.displayHints = setterArg;
        return this;
      }
      private @Nullable List<PaymentProductField> fields;
      public @NonNull Builder setFields(@NonNull List<PaymentProductField> setterArg) {
        this.fields = setterArg;
        return this;
      }
      public @NonNull PaymentProduct build() {
        PaymentProduct pigeonReturn = new PaymentProduct();
        pigeonReturn.setId(id);
        pigeonReturn.setPaymentMethod(paymentMethod);
        pigeonReturn.setPaymentProductGroup(paymentProductGroup);
        pigeonReturn.setMinAmount(minAmount);
        pigeonReturn.setMaxAmount(maxAmount);
        pigeonReturn.setAllowsRecurring(allowsRecurring);
        pigeonReturn.setAllowsTokenization(allowsTokenization);
        pigeonReturn.setUsesRedirectionTo3rdParty(usesRedirectionTo3rdParty);
        pigeonReturn.setDisplayHints(displayHints);
        pigeonReturn.setFields(fields);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("paymentMethod", paymentMethod);
      toMapResult.put("paymentProductGroup", paymentProductGroup);
      toMapResult.put("minAmount", minAmount);
      toMapResult.put("maxAmount", maxAmount);
      toMapResult.put("allowsRecurring", allowsRecurring);
      toMapResult.put("allowsTokenization", allowsTokenization);
      toMapResult.put("usesRedirectionTo3rdParty", usesRedirectionTo3rdParty);
      toMapResult.put("displayHints", (displayHints == null) ? null : displayHints.toMap());
      toMapResult.put("fields", fields);
      return toMapResult;
    }
    static @NonNull PaymentProduct fromMap(@NonNull Map<String, Object> map) {
      PaymentProduct pigeonResult = new PaymentProduct();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object paymentMethod = map.get("paymentMethod");
      pigeonResult.setPaymentMethod((String)paymentMethod);
      Object paymentProductGroup = map.get("paymentProductGroup");
      pigeonResult.setPaymentProductGroup((String)paymentProductGroup);
      Object minAmount = map.get("minAmount");
      pigeonResult.setMinAmount((Double)minAmount);
      Object maxAmount = map.get("maxAmount");
      pigeonResult.setMaxAmount((Double)maxAmount);
      Object allowsRecurring = map.get("allowsRecurring");
      pigeonResult.setAllowsRecurring((Boolean)allowsRecurring);
      Object allowsTokenization = map.get("allowsTokenization");
      pigeonResult.setAllowsTokenization((Boolean)allowsTokenization);
      Object usesRedirectionTo3rdParty = map.get("usesRedirectionTo3rdParty");
      pigeonResult.setUsesRedirectionTo3rdParty((Boolean)usesRedirectionTo3rdParty);
      Object displayHints = map.get("displayHints");
      pigeonResult.setDisplayHints((displayHints == null) ? null : DisplayHintsPaymentItem.fromMap((Map)displayHints));
      Object fields = map.get("fields");
      pigeonResult.setFields((List<PaymentProductField>)fields);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentProductField {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull Type type;
    public @NonNull Type getType() { return type; }
    public void setType(@NonNull Type setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @Nullable DisplayHintsProductFields displayHints;
    public @Nullable DisplayHintsProductFields getDisplayHints() { return displayHints; }
    public void setDisplayHints(@Nullable DisplayHintsProductFields setterArg) {
      this.displayHints = setterArg;
    }

    private @Nullable DataRestrictions dataRestrictions;
    public @Nullable DataRestrictions getDataRestrictions() { return dataRestrictions; }
    public void setDataRestrictions(@Nullable DataRestrictions setterArg) {
      this.dataRestrictions = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PaymentProductField() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable Type type;
      public @NonNull Builder setType(@NonNull Type setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable DisplayHintsProductFields displayHints;
      public @NonNull Builder setDisplayHints(@Nullable DisplayHintsProductFields setterArg) {
        this.displayHints = setterArg;
        return this;
      }
      private @Nullable DataRestrictions dataRestrictions;
      public @NonNull Builder setDataRestrictions(@Nullable DataRestrictions setterArg) {
        this.dataRestrictions = setterArg;
        return this;
      }
      public @NonNull PaymentProductField build() {
        PaymentProductField pigeonReturn = new PaymentProductField();
        pigeonReturn.setId(id);
        pigeonReturn.setType(type);
        pigeonReturn.setDisplayHints(displayHints);
        pigeonReturn.setDataRestrictions(dataRestrictions);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("type", type == null ? null : type.index);
      toMapResult.put("displayHints", (displayHints == null) ? null : displayHints.toMap());
      toMapResult.put("dataRestrictions", (dataRestrictions == null) ? null : dataRestrictions.toMap());
      return toMapResult;
    }
    static @NonNull PaymentProductField fromMap(@NonNull Map<String, Object> map) {
      PaymentProductField pigeonResult = new PaymentProductField();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : Type.values()[(int)type]);
      Object displayHints = map.get("displayHints");
      pigeonResult.setDisplayHints((displayHints == null) ? null : DisplayHintsProductFields.fromMap((Map)displayHints));
      Object dataRestrictions = map.get("dataRestrictions");
      pigeonResult.setDataRestrictions((dataRestrictions == null) ? null : DataRestrictions.fromMap((Map)dataRestrictions));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DisplayHintsProductFields {
    private @NonNull Boolean alwaysShow;
    public @NonNull Boolean getAlwaysShow() { return alwaysShow; }
    public void setAlwaysShow(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"alwaysShow\" is null.");
      }
      this.alwaysShow = setterArg;
    }

    private @NonNull Boolean obfuscate;
    public @NonNull Boolean getObfuscate() { return obfuscate; }
    public void setObfuscate(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"obfuscate\" is null.");
      }
      this.obfuscate = setterArg;
    }

    private @NonNull Long displayOrder;
    public @NonNull Long getDisplayOrder() { return displayOrder; }
    public void setDisplayOrder(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"displayOrder\" is null.");
      }
      this.displayOrder = setterArg;
    }

    private @NonNull String label;
    public @NonNull String getLabel() { return label; }
    public void setLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"label\" is null.");
      }
      this.label = setterArg;
    }

    private @NonNull String placeholderLabel;
    public @NonNull String getPlaceholderLabel() { return placeholderLabel; }
    public void setPlaceholderLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"placeholderLabel\" is null.");
      }
      this.placeholderLabel = setterArg;
    }

    private @NonNull String link;
    public @NonNull String getLink() { return link; }
    public void setLink(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"link\" is null.");
      }
      this.link = setterArg;
    }

    private @NonNull String mask;
    public @NonNull String getMask() { return mask; }
    public void setMask(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mask\" is null.");
      }
      this.mask = setterArg;
    }

    private @NonNull PreferredInputType preferredInputType;
    public @NonNull PreferredInputType getPreferredInputType() { return preferredInputType; }
    public void setPreferredInputType(@NonNull PreferredInputType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"preferredInputType\" is null.");
      }
      this.preferredInputType = setterArg;
    }

    private @NonNull Tooltip tooltip;
    public @NonNull Tooltip getTooltip() { return tooltip; }
    public void setTooltip(@NonNull Tooltip setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tooltip\" is null.");
      }
      this.tooltip = setterArg;
    }

    private @NonNull FormElement formElement;
    public @NonNull FormElement getFormElement() { return formElement; }
    public void setFormElement(@NonNull FormElement setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"formElement\" is null.");
      }
      this.formElement = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DisplayHintsProductFields() {}
    public static final class Builder {
      private @Nullable Boolean alwaysShow;
      public @NonNull Builder setAlwaysShow(@NonNull Boolean setterArg) {
        this.alwaysShow = setterArg;
        return this;
      }
      private @Nullable Boolean obfuscate;
      public @NonNull Builder setObfuscate(@NonNull Boolean setterArg) {
        this.obfuscate = setterArg;
        return this;
      }
      private @Nullable Long displayOrder;
      public @NonNull Builder setDisplayOrder(@NonNull Long setterArg) {
        this.displayOrder = setterArg;
        return this;
      }
      private @Nullable String label;
      public @NonNull Builder setLabel(@NonNull String setterArg) {
        this.label = setterArg;
        return this;
      }
      private @Nullable String placeholderLabel;
      public @NonNull Builder setPlaceholderLabel(@NonNull String setterArg) {
        this.placeholderLabel = setterArg;
        return this;
      }
      private @Nullable String link;
      public @NonNull Builder setLink(@NonNull String setterArg) {
        this.link = setterArg;
        return this;
      }
      private @Nullable String mask;
      public @NonNull Builder setMask(@NonNull String setterArg) {
        this.mask = setterArg;
        return this;
      }
      private @Nullable PreferredInputType preferredInputType;
      public @NonNull Builder setPreferredInputType(@NonNull PreferredInputType setterArg) {
        this.preferredInputType = setterArg;
        return this;
      }
      private @Nullable Tooltip tooltip;
      public @NonNull Builder setTooltip(@NonNull Tooltip setterArg) {
        this.tooltip = setterArg;
        return this;
      }
      private @Nullable FormElement formElement;
      public @NonNull Builder setFormElement(@NonNull FormElement setterArg) {
        this.formElement = setterArg;
        return this;
      }
      public @NonNull DisplayHintsProductFields build() {
        DisplayHintsProductFields pigeonReturn = new DisplayHintsProductFields();
        pigeonReturn.setAlwaysShow(alwaysShow);
        pigeonReturn.setObfuscate(obfuscate);
        pigeonReturn.setDisplayOrder(displayOrder);
        pigeonReturn.setLabel(label);
        pigeonReturn.setPlaceholderLabel(placeholderLabel);
        pigeonReturn.setLink(link);
        pigeonReturn.setMask(mask);
        pigeonReturn.setPreferredInputType(preferredInputType);
        pigeonReturn.setTooltip(tooltip);
        pigeonReturn.setFormElement(formElement);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("alwaysShow", alwaysShow);
      toMapResult.put("obfuscate", obfuscate);
      toMapResult.put("displayOrder", displayOrder);
      toMapResult.put("label", label);
      toMapResult.put("placeholderLabel", placeholderLabel);
      toMapResult.put("link", link);
      toMapResult.put("mask", mask);
      toMapResult.put("preferredInputType", preferredInputType == null ? null : preferredInputType.index);
      toMapResult.put("tooltip", (tooltip == null) ? null : tooltip.toMap());
      toMapResult.put("formElement", (formElement == null) ? null : formElement.toMap());
      return toMapResult;
    }
    static @NonNull DisplayHintsProductFields fromMap(@NonNull Map<String, Object> map) {
      DisplayHintsProductFields pigeonResult = new DisplayHintsProductFields();
      Object alwaysShow = map.get("alwaysShow");
      pigeonResult.setAlwaysShow((Boolean)alwaysShow);
      Object obfuscate = map.get("obfuscate");
      pigeonResult.setObfuscate((Boolean)obfuscate);
      Object displayOrder = map.get("displayOrder");
      pigeonResult.setDisplayOrder((displayOrder == null) ? null : ((displayOrder instanceof Integer) ? (Integer)displayOrder : (Long)displayOrder));
      Object label = map.get("label");
      pigeonResult.setLabel((String)label);
      Object placeholderLabel = map.get("placeholderLabel");
      pigeonResult.setPlaceholderLabel((String)placeholderLabel);
      Object link = map.get("link");
      pigeonResult.setLink((String)link);
      Object mask = map.get("mask");
      pigeonResult.setMask((String)mask);
      Object preferredInputType = map.get("preferredInputType");
      pigeonResult.setPreferredInputType(preferredInputType == null ? null : PreferredInputType.values()[(int)preferredInputType]);
      Object tooltip = map.get("tooltip");
      pigeonResult.setTooltip((tooltip == null) ? null : Tooltip.fromMap((Map)tooltip));
      Object formElement = map.get("formElement");
      pigeonResult.setFormElement((formElement == null) ? null : FormElement.fromMap((Map)formElement));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Tooltip {
    private @NonNull String image;
    public @NonNull String getImage() { return image; }
    public void setImage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"image\" is null.");
      }
      this.image = setterArg;
    }

    private @NonNull String label;
    public @NonNull String getLabel() { return label; }
    public void setLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"label\" is null.");
      }
      this.label = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private Tooltip() {}
    public static final class Builder {
      private @Nullable String image;
      public @NonNull Builder setImage(@NonNull String setterArg) {
        this.image = setterArg;
        return this;
      }
      private @Nullable String label;
      public @NonNull Builder setLabel(@NonNull String setterArg) {
        this.label = setterArg;
        return this;
      }
      public @NonNull Tooltip build() {
        Tooltip pigeonReturn = new Tooltip();
        pigeonReturn.setImage(image);
        pigeonReturn.setLabel(label);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("image", image);
      toMapResult.put("label", label);
      return toMapResult;
    }
    static @NonNull Tooltip fromMap(@NonNull Map<String, Object> map) {
      Tooltip pigeonResult = new Tooltip();
      Object image = map.get("image");
      pigeonResult.setImage((String)image);
      Object label = map.get("label");
      pigeonResult.setLabel((String)label);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FormElement {
    private @NonNull ListType type;
    public @NonNull ListType getType() { return type; }
    public void setType(@NonNull ListType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull List<ValueMap> valueMapping;
    public @NonNull List<ValueMap> getValueMapping() { return valueMapping; }
    public void setValueMapping(@NonNull List<ValueMap> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"valueMapping\" is null.");
      }
      this.valueMapping = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private FormElement() {}
    public static final class Builder {
      private @Nullable ListType type;
      public @NonNull Builder setType(@NonNull ListType setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable List<ValueMap> valueMapping;
      public @NonNull Builder setValueMapping(@NonNull List<ValueMap> setterArg) {
        this.valueMapping = setterArg;
        return this;
      }
      public @NonNull FormElement build() {
        FormElement pigeonReturn = new FormElement();
        pigeonReturn.setType(type);
        pigeonReturn.setValueMapping(valueMapping);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type == null ? null : type.index);
      toMapResult.put("valueMapping", valueMapping);
      return toMapResult;
    }
    static @NonNull FormElement fromMap(@NonNull Map<String, Object> map) {
      FormElement pigeonResult = new FormElement();
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : ListType.values()[(int)type]);
      Object valueMapping = map.get("valueMapping");
      pigeonResult.setValueMapping((List<ValueMap>)valueMapping);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ValueMap {
    private @NonNull String value;
    public @NonNull String getValue() { return value; }
    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    private @NonNull List<PaymentProductFieldDisplayElement> displayElements;
    public @NonNull List<PaymentProductFieldDisplayElement> getDisplayElements() { return displayElements; }
    public void setDisplayElements(@NonNull List<PaymentProductFieldDisplayElement> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"displayElements\" is null.");
      }
      this.displayElements = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ValueMap() {}
    public static final class Builder {
      private @Nullable String value;
      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }
      private @Nullable List<PaymentProductFieldDisplayElement> displayElements;
      public @NonNull Builder setDisplayElements(@NonNull List<PaymentProductFieldDisplayElement> setterArg) {
        this.displayElements = setterArg;
        return this;
      }
      public @NonNull ValueMap build() {
        ValueMap pigeonReturn = new ValueMap();
        pigeonReturn.setValue(value);
        pigeonReturn.setDisplayElements(displayElements);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("displayElements", displayElements);
      return toMapResult;
    }
    static @NonNull ValueMap fromMap(@NonNull Map<String, Object> map) {
      ValueMap pigeonResult = new ValueMap();
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      Object displayElements = map.get("displayElements");
      pigeonResult.setDisplayElements((List<PaymentProductFieldDisplayElement>)displayElements);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentProductFieldDisplayElement {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull PaymentProductFieldDisplayElementType type;
    public @NonNull PaymentProductFieldDisplayElementType getType() { return type; }
    public void setType(@NonNull PaymentProductFieldDisplayElementType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull String value;
    public @NonNull String getValue() { return value; }
    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PaymentProductFieldDisplayElement() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable PaymentProductFieldDisplayElementType type;
      public @NonNull Builder setType(@NonNull PaymentProductFieldDisplayElementType setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable String value;
      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull PaymentProductFieldDisplayElement build() {
        PaymentProductFieldDisplayElement pigeonReturn = new PaymentProductFieldDisplayElement();
        pigeonReturn.setId(id);
        pigeonReturn.setType(type);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("type", type == null ? null : type.index);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static @NonNull PaymentProductFieldDisplayElement fromMap(@NonNull Map<String, Object> map) {
      PaymentProductFieldDisplayElement pigeonResult = new PaymentProductFieldDisplayElement();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : PaymentProductFieldDisplayElementType.values()[(int)type]);
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DataRestrictions {
    private @NonNull Boolean isRequired;
    public @NonNull Boolean getIsRequired() { return isRequired; }
    public void setIsRequired(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isRequired\" is null.");
      }
      this.isRequired = setterArg;
    }

    private @NonNull List<AbstractValidationRule> validationRules;
    public @NonNull List<AbstractValidationRule> getValidationRules() { return validationRules; }
    public void setValidationRules(@NonNull List<AbstractValidationRule> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"validationRules\" is null.");
      }
      this.validationRules = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DataRestrictions() {}
    public static final class Builder {
      private @Nullable Boolean isRequired;
      public @NonNull Builder setIsRequired(@NonNull Boolean setterArg) {
        this.isRequired = setterArg;
        return this;
      }
      private @Nullable List<AbstractValidationRule> validationRules;
      public @NonNull Builder setValidationRules(@NonNull List<AbstractValidationRule> setterArg) {
        this.validationRules = setterArg;
        return this;
      }
      public @NonNull DataRestrictions build() {
        DataRestrictions pigeonReturn = new DataRestrictions();
        pigeonReturn.setIsRequired(isRequired);
        pigeonReturn.setValidationRules(validationRules);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isRequired", isRequired);
      toMapResult.put("validationRules", validationRules);
      return toMapResult;
    }
    static @NonNull DataRestrictions fromMap(@NonNull Map<String, Object> map) {
      DataRestrictions pigeonResult = new DataRestrictions();
      Object isRequired = map.get("isRequired");
      pigeonResult.setIsRequired((Boolean)isRequired);
      Object validationRules = map.get("validationRules");
      pigeonResult.setValidationRules((List<AbstractValidationRule>)validationRules);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AbstractValidationRule {
    private @NonNull String messageId;
    public @NonNull String getMessageId() { return messageId; }
    public void setMessageId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"messageId\" is null.");
      }
      this.messageId = setterArg;
    }

    private @NonNull ValidationType type;
    public @NonNull ValidationType getType() { return type; }
    public void setType(@NonNull ValidationType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AbstractValidationRule() {}
    public static final class Builder {
      private @Nullable String messageId;
      public @NonNull Builder setMessageId(@NonNull String setterArg) {
        this.messageId = setterArg;
        return this;
      }
      private @Nullable ValidationType type;
      public @NonNull Builder setType(@NonNull ValidationType setterArg) {
        this.type = setterArg;
        return this;
      }
      public @NonNull AbstractValidationRule build() {
        AbstractValidationRule pigeonReturn = new AbstractValidationRule();
        pigeonReturn.setMessageId(messageId);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("messageId", messageId);
      toMapResult.put("type", type == null ? null : type.index);
      return toMapResult;
    }
    static @NonNull AbstractValidationRule fromMap(@NonNull Map<String, Object> map) {
      AbstractValidationRule pigeonResult = new AbstractValidationRule();
      Object messageId = map.get("messageId");
      pigeonResult.setMessageId((String)messageId);
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : ValidationType.values()[(int)type]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentRequest {
    private @NonNull Map<String, String> values;
    public @NonNull Map<String, String> getValues() { return values; }
    public void setValues(@NonNull Map<String, String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"values\" is null.");
      }
      this.values = setterArg;
    }

    private @NonNull String paymentProductId;
    public @NonNull String getPaymentProductId() { return paymentProductId; }
    public void setPaymentProductId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"paymentProductId\" is null.");
      }
      this.paymentProductId = setterArg;
    }

    private @NonNull Boolean tokenize;
    public @NonNull Boolean getTokenize() { return tokenize; }
    public void setTokenize(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tokenize\" is null.");
      }
      this.tokenize = setterArg;
    }

    private @NonNull String sessionId;
    public @NonNull String getSessionId() { return sessionId; }
    public void setSessionId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionId\" is null.");
      }
      this.sessionId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PaymentRequest() {}
    public static final class Builder {
      private @Nullable Map<String, String> values;
      public @NonNull Builder setValues(@NonNull Map<String, String> setterArg) {
        this.values = setterArg;
        return this;
      }
      private @Nullable String paymentProductId;
      public @NonNull Builder setPaymentProductId(@NonNull String setterArg) {
        this.paymentProductId = setterArg;
        return this;
      }
      private @Nullable Boolean tokenize;
      public @NonNull Builder setTokenize(@NonNull Boolean setterArg) {
        this.tokenize = setterArg;
        return this;
      }
      private @Nullable String sessionId;
      public @NonNull Builder setSessionId(@NonNull String setterArg) {
        this.sessionId = setterArg;
        return this;
      }
      public @NonNull PaymentRequest build() {
        PaymentRequest pigeonReturn = new PaymentRequest();
        pigeonReturn.setValues(values);
        pigeonReturn.setPaymentProductId(paymentProductId);
        pigeonReturn.setTokenize(tokenize);
        pigeonReturn.setSessionId(sessionId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("values", values);
      toMapResult.put("paymentProductId", paymentProductId);
      toMapResult.put("tokenize", tokenize);
      toMapResult.put("sessionId", sessionId);
      return toMapResult;
    }
    static @NonNull PaymentRequest fromMap(@NonNull Map<String, Object> map) {
      PaymentRequest pigeonResult = new PaymentRequest();
      Object values = map.get("values");
      pigeonResult.setValues((Map<String, String>)values);
      Object paymentProductId = map.get("paymentProductId");
      pigeonResult.setPaymentProductId((String)paymentProductId);
      Object tokenize = map.get("tokenize");
      pigeonResult.setTokenize((Boolean)tokenize);
      Object sessionId = map.get("sessionId");
      pigeonResult.setSessionId((String)sessionId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PreparedPaymentRequest {
    private @NonNull String encryptedFields;
    public @NonNull String getEncryptedFields() { return encryptedFields; }
    public void setEncryptedFields(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"encryptedFields\" is null.");
      }
      this.encryptedFields = setterArg;
    }

    private @NonNull String encodedClientMetaInfo;
    public @NonNull String getEncodedClientMetaInfo() { return encodedClientMetaInfo; }
    public void setEncodedClientMetaInfo(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"encodedClientMetaInfo\" is null.");
      }
      this.encodedClientMetaInfo = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreparedPaymentRequest() {}
    public static final class Builder {
      private @Nullable String encryptedFields;
      public @NonNull Builder setEncryptedFields(@NonNull String setterArg) {
        this.encryptedFields = setterArg;
        return this;
      }
      private @Nullable String encodedClientMetaInfo;
      public @NonNull Builder setEncodedClientMetaInfo(@NonNull String setterArg) {
        this.encodedClientMetaInfo = setterArg;
        return this;
      }
      public @NonNull PreparedPaymentRequest build() {
        PreparedPaymentRequest pigeonReturn = new PreparedPaymentRequest();
        pigeonReturn.setEncryptedFields(encryptedFields);
        pigeonReturn.setEncodedClientMetaInfo(encodedClientMetaInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("encryptedFields", encryptedFields);
      toMapResult.put("encodedClientMetaInfo", encodedClientMetaInfo);
      return toMapResult;
    }
    static @NonNull PreparedPaymentRequest fromMap(@NonNull Map<String, Object> map) {
      PreparedPaymentRequest pigeonResult = new PreparedPaymentRequest();
      Object encryptedFields = map.get("encryptedFields");
      pigeonResult.setEncryptedFields((String)encryptedFields);
      Object encodedClientMetaInfo = map.get("encodedClientMetaInfo");
      pigeonResult.setEncodedClientMetaInfo((String)encodedClientMetaInfo);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ApiCodec extends StandardMessageCodec {
    public static final ApiCodec INSTANCE = new ApiCodec();
    private ApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AbstractValidationRule.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return BasicPaymentProduct.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return DataRestrictions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return DisplayHintsPaymentItem.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return DisplayHintsProductFields.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return FormElement.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return GetPaymentProductRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return PaymentContextRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return PaymentContextResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return PaymentProduct.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return PaymentProductField.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return PaymentProductFieldDisplayElement.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return PaymentRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return PreparedPaymentRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return SessionRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return SessionResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return Tooltip.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return ValueMap.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AbstractValidationRule) {
        stream.write(128);
        writeValue(stream, ((AbstractValidationRule) value).toMap());
      } else 
      if (value instanceof BasicPaymentProduct) {
        stream.write(129);
        writeValue(stream, ((BasicPaymentProduct) value).toMap());
      } else 
      if (value instanceof DataRestrictions) {
        stream.write(130);
        writeValue(stream, ((DataRestrictions) value).toMap());
      } else 
      if (value instanceof DisplayHintsPaymentItem) {
        stream.write(131);
        writeValue(stream, ((DisplayHintsPaymentItem) value).toMap());
      } else 
      if (value instanceof DisplayHintsProductFields) {
        stream.write(132);
        writeValue(stream, ((DisplayHintsProductFields) value).toMap());
      } else 
      if (value instanceof FormElement) {
        stream.write(133);
        writeValue(stream, ((FormElement) value).toMap());
      } else 
      if (value instanceof GetPaymentProductRequest) {
        stream.write(134);
        writeValue(stream, ((GetPaymentProductRequest) value).toMap());
      } else 
      if (value instanceof PaymentContextRequest) {
        stream.write(135);
        writeValue(stream, ((PaymentContextRequest) value).toMap());
      } else 
      if (value instanceof PaymentContextResponse) {
        stream.write(136);
        writeValue(stream, ((PaymentContextResponse) value).toMap());
      } else 
      if (value instanceof PaymentProduct) {
        stream.write(137);
        writeValue(stream, ((PaymentProduct) value).toMap());
      } else 
      if (value instanceof PaymentProductField) {
        stream.write(138);
        writeValue(stream, ((PaymentProductField) value).toMap());
      } else 
      if (value instanceof PaymentProductFieldDisplayElement) {
        stream.write(139);
        writeValue(stream, ((PaymentProductFieldDisplayElement) value).toMap());
      } else 
      if (value instanceof PaymentRequest) {
        stream.write(140);
        writeValue(stream, ((PaymentRequest) value).toMap());
      } else 
      if (value instanceof PreparedPaymentRequest) {
        stream.write(141);
        writeValue(stream, ((PreparedPaymentRequest) value).toMap());
      } else 
      if (value instanceof SessionRequest) {
        stream.write(142);
        writeValue(stream, ((SessionRequest) value).toMap());
      } else 
      if (value instanceof SessionResponse) {
        stream.write(143);
        writeValue(stream, ((SessionResponse) value).toMap());
      } else 
      if (value instanceof Tooltip) {
        stream.write(144);
        writeValue(stream, ((Tooltip) value).toMap());
      } else 
      if (value instanceof ValueMap) {
        stream.write(145);
        writeValue(stream, ((ValueMap) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Api {
    @NonNull SessionResponse createClientSession(@NonNull SessionRequest request);
    void getBasicPaymentItems(@NonNull PaymentContextRequest request, Result<PaymentContextResponse> result);
    void getPaymentProduct(@NonNull GetPaymentProductRequest request, Result<PaymentProduct> result);
    void preparePaymentRequest(@NonNull PaymentRequest request, Result<PreparedPaymentRequest> result);

    /** The codec used by Api. */
    static MessageCodec<Object> getCodec() {
      return ApiCodec.INSTANCE;
    }

    /** Sets up an instance of `Api` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.createClientSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SessionRequest requestArg = (SessionRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              SessionResponse output = api.createClientSession(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.getBasicPaymentItems", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              PaymentContextRequest requestArg = (PaymentContextRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              Result<PaymentContextResponse> resultCallback = new Result<PaymentContextResponse>() {
                public void success(PaymentContextResponse result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getBasicPaymentItems(requestArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.getPaymentProduct", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              GetPaymentProductRequest requestArg = (GetPaymentProductRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              Result<PaymentProduct> resultCallback = new Result<PaymentProduct>() {
                public void success(PaymentProduct result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getPaymentProduct(requestArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.preparePaymentRequest", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              PaymentRequest requestArg = (PaymentRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              Result<PreparedPaymentRequest> resultCallback = new Result<PreparedPaymentRequest>() {
                public void success(PreparedPaymentRequest result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.preparePaymentRequest(requestArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
