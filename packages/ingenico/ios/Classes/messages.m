// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTSessionRequest ()
+ (FLTSessionRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTSessionResponse ()
+ (FLTSessionResponse *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPaymentContextRequest ()
+ (FLTPaymentContextRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTGetPaymentProductRequest ()
+ (FLTGetPaymentProductRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPaymentContextResponse ()
+ (FLTPaymentContextResponse *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTBasicPaymentProduct ()
+ (FLTBasicPaymentProduct *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDisplayHintsPaymentItem ()
+ (FLTDisplayHintsPaymentItem *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPaymentProduct ()
+ (FLTPaymentProduct *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPaymentProductField ()
+ (FLTPaymentProductField *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDisplayHintsProductFields ()
+ (FLTDisplayHintsProductFields *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTTooltip ()
+ (FLTTooltip *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTFormElement ()
+ (FLTFormElement *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTValueMap ()
+ (FLTValueMap *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPaymentProductFieldDisplayElement ()
+ (FLTPaymentProductFieldDisplayElement *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDataRestrictions ()
+ (FLTDataRestrictions *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTAbstractValidationRule ()
+ (FLTAbstractValidationRule *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPaymentRequest ()
+ (FLTPaymentRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPreparedPaymentRequest ()
+ (FLTPreparedPaymentRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTSessionRequest
+ (instancetype)makeWithClientSessionId:(NSString *)clientSessionId
    customerId:(NSString *)customerId
    clientApiUrl:(NSString *)clientApiUrl
    assetBaseUrl:(NSString *)assetBaseUrl
    environmentIsProduction:(NSNumber *)environmentIsProduction
    applicationIdentifier:(NSString *)applicationIdentifier {
  FLTSessionRequest* pigeonResult = [[FLTSessionRequest alloc] init];
  pigeonResult.clientSessionId = clientSessionId;
  pigeonResult.customerId = customerId;
  pigeonResult.clientApiUrl = clientApiUrl;
  pigeonResult.assetBaseUrl = assetBaseUrl;
  pigeonResult.environmentIsProduction = environmentIsProduction;
  pigeonResult.applicationIdentifier = applicationIdentifier;
  return pigeonResult;
}
+ (FLTSessionRequest *)fromMap:(NSDictionary *)dict {
  FLTSessionRequest *pigeonResult = [[FLTSessionRequest alloc] init];
  pigeonResult.clientSessionId = GetNullableObject(dict, @"clientSessionId");
  NSAssert(pigeonResult.clientSessionId != nil, @"");
  pigeonResult.customerId = GetNullableObject(dict, @"customerId");
  NSAssert(pigeonResult.customerId != nil, @"");
  pigeonResult.clientApiUrl = GetNullableObject(dict, @"clientApiUrl");
  NSAssert(pigeonResult.clientApiUrl != nil, @"");
  pigeonResult.assetBaseUrl = GetNullableObject(dict, @"assetBaseUrl");
  NSAssert(pigeonResult.assetBaseUrl != nil, @"");
  pigeonResult.environmentIsProduction = GetNullableObject(dict, @"environmentIsProduction");
  NSAssert(pigeonResult.environmentIsProduction != nil, @"");
  pigeonResult.applicationIdentifier = GetNullableObject(dict, @"applicationIdentifier");
  NSAssert(pigeonResult.applicationIdentifier != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.clientSessionId ? self.clientSessionId : [NSNull null]), @"clientSessionId", (self.customerId ? self.customerId : [NSNull null]), @"customerId", (self.clientApiUrl ? self.clientApiUrl : [NSNull null]), @"clientApiUrl", (self.assetBaseUrl ? self.assetBaseUrl : [NSNull null]), @"assetBaseUrl", (self.environmentIsProduction ? self.environmentIsProduction : [NSNull null]), @"environmentIsProduction", (self.applicationIdentifier ? self.applicationIdentifier : [NSNull null]), @"applicationIdentifier", nil];
}
@end

@implementation FLTSessionResponse
+ (instancetype)makeWithSessionId:(NSString *)sessionId {
  FLTSessionResponse* pigeonResult = [[FLTSessionResponse alloc] init];
  pigeonResult.sessionId = sessionId;
  return pigeonResult;
}
+ (FLTSessionResponse *)fromMap:(NSDictionary *)dict {
  FLTSessionResponse *pigeonResult = [[FLTSessionResponse alloc] init];
  pigeonResult.sessionId = GetNullableObject(dict, @"sessionId");
  NSAssert(pigeonResult.sessionId != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", nil];
}
@end

@implementation FLTPaymentContextRequest
+ (instancetype)makeWithSessionId:(NSString *)sessionId
    amountValue:(NSNumber *)amountValue
    currencyCode:(NSString *)currencyCode
    countryCode:(NSString *)countryCode
    isRecurring:(NSNumber *)isRecurring {
  FLTPaymentContextRequest* pigeonResult = [[FLTPaymentContextRequest alloc] init];
  pigeonResult.sessionId = sessionId;
  pigeonResult.amountValue = amountValue;
  pigeonResult.currencyCode = currencyCode;
  pigeonResult.countryCode = countryCode;
  pigeonResult.isRecurring = isRecurring;
  return pigeonResult;
}
+ (FLTPaymentContextRequest *)fromMap:(NSDictionary *)dict {
  FLTPaymentContextRequest *pigeonResult = [[FLTPaymentContextRequest alloc] init];
  pigeonResult.sessionId = GetNullableObject(dict, @"sessionId");
  NSAssert(pigeonResult.sessionId != nil, @"");
  pigeonResult.amountValue = GetNullableObject(dict, @"amountValue");
  NSAssert(pigeonResult.amountValue != nil, @"");
  pigeonResult.currencyCode = GetNullableObject(dict, @"currencyCode");
  NSAssert(pigeonResult.currencyCode != nil, @"");
  pigeonResult.countryCode = GetNullableObject(dict, @"countryCode");
  NSAssert(pigeonResult.countryCode != nil, @"");
  pigeonResult.isRecurring = GetNullableObject(dict, @"isRecurring");
  NSAssert(pigeonResult.isRecurring != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", (self.amountValue ? self.amountValue : [NSNull null]), @"amountValue", (self.currencyCode ? self.currencyCode : [NSNull null]), @"currencyCode", (self.countryCode ? self.countryCode : [NSNull null]), @"countryCode", (self.isRecurring ? self.isRecurring : [NSNull null]), @"isRecurring", nil];
}
@end

@implementation FLTGetPaymentProductRequest
+ (instancetype)makeWithSessionId:(NSString *)sessionId
    paymentProductId:(NSString *)paymentProductId
    amountValue:(NSNumber *)amountValue
    currencyCode:(NSString *)currencyCode
    countryCode:(NSString *)countryCode
    isRecurring:(NSNumber *)isRecurring {
  FLTGetPaymentProductRequest* pigeonResult = [[FLTGetPaymentProductRequest alloc] init];
  pigeonResult.sessionId = sessionId;
  pigeonResult.paymentProductId = paymentProductId;
  pigeonResult.amountValue = amountValue;
  pigeonResult.currencyCode = currencyCode;
  pigeonResult.countryCode = countryCode;
  pigeonResult.isRecurring = isRecurring;
  return pigeonResult;
}
+ (FLTGetPaymentProductRequest *)fromMap:(NSDictionary *)dict {
  FLTGetPaymentProductRequest *pigeonResult = [[FLTGetPaymentProductRequest alloc] init];
  pigeonResult.sessionId = GetNullableObject(dict, @"sessionId");
  NSAssert(pigeonResult.sessionId != nil, @"");
  pigeonResult.paymentProductId = GetNullableObject(dict, @"paymentProductId");
  NSAssert(pigeonResult.paymentProductId != nil, @"");
  pigeonResult.amountValue = GetNullableObject(dict, @"amountValue");
  NSAssert(pigeonResult.amountValue != nil, @"");
  pigeonResult.currencyCode = GetNullableObject(dict, @"currencyCode");
  NSAssert(pigeonResult.currencyCode != nil, @"");
  pigeonResult.countryCode = GetNullableObject(dict, @"countryCode");
  NSAssert(pigeonResult.countryCode != nil, @"");
  pigeonResult.isRecurring = GetNullableObject(dict, @"isRecurring");
  NSAssert(pigeonResult.isRecurring != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", (self.paymentProductId ? self.paymentProductId : [NSNull null]), @"paymentProductId", (self.amountValue ? self.amountValue : [NSNull null]), @"amountValue", (self.currencyCode ? self.currencyCode : [NSNull null]), @"currencyCode", (self.countryCode ? self.countryCode : [NSNull null]), @"countryCode", (self.isRecurring ? self.isRecurring : [NSNull null]), @"isRecurring", nil];
}
@end

@implementation FLTPaymentContextResponse
+ (instancetype)makeWithBasicPaymentProduct:(NSArray<FLTBasicPaymentProduct *> *)basicPaymentProduct {
  FLTPaymentContextResponse* pigeonResult = [[FLTPaymentContextResponse alloc] init];
  pigeonResult.basicPaymentProduct = basicPaymentProduct;
  return pigeonResult;
}
+ (FLTPaymentContextResponse *)fromMap:(NSDictionary *)dict {
  FLTPaymentContextResponse *pigeonResult = [[FLTPaymentContextResponse alloc] init];
  pigeonResult.basicPaymentProduct = GetNullableObject(dict, @"basicPaymentProduct");
  NSAssert(pigeonResult.basicPaymentProduct != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.basicPaymentProduct ? self.basicPaymentProduct : [NSNull null]), @"basicPaymentProduct", nil];
}
@end

@implementation FLTBasicPaymentProduct
+ (instancetype)makeWithId:(NSString *)id
    paymentMethod:(nullable NSString *)paymentMethod
    paymentProductGroup:(nullable NSString *)paymentProductGroup
    minAmount:(nullable NSNumber *)minAmount
    maxAmount:(nullable NSNumber *)maxAmount
    allowsRecurring:(nullable NSNumber *)allowsRecurring
    allowsTokenization:(nullable NSNumber *)allowsTokenization
    usesRedirectionTo3rdParty:(nullable NSNumber *)usesRedirectionTo3rdParty
    displayHints:(nullable FLTDisplayHintsPaymentItem *)displayHints {
  FLTBasicPaymentProduct* pigeonResult = [[FLTBasicPaymentProduct alloc] init];
  pigeonResult.id = id;
  pigeonResult.paymentMethod = paymentMethod;
  pigeonResult.paymentProductGroup = paymentProductGroup;
  pigeonResult.minAmount = minAmount;
  pigeonResult.maxAmount = maxAmount;
  pigeonResult.allowsRecurring = allowsRecurring;
  pigeonResult.allowsTokenization = allowsTokenization;
  pigeonResult.usesRedirectionTo3rdParty = usesRedirectionTo3rdParty;
  pigeonResult.displayHints = displayHints;
  return pigeonResult;
}
+ (FLTBasicPaymentProduct *)fromMap:(NSDictionary *)dict {
  FLTBasicPaymentProduct *pigeonResult = [[FLTBasicPaymentProduct alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.paymentMethod = GetNullableObject(dict, @"paymentMethod");
  pigeonResult.paymentProductGroup = GetNullableObject(dict, @"paymentProductGroup");
  pigeonResult.minAmount = GetNullableObject(dict, @"minAmount");
  pigeonResult.maxAmount = GetNullableObject(dict, @"maxAmount");
  pigeonResult.allowsRecurring = GetNullableObject(dict, @"allowsRecurring");
  pigeonResult.allowsTokenization = GetNullableObject(dict, @"allowsTokenization");
  pigeonResult.usesRedirectionTo3rdParty = GetNullableObject(dict, @"usesRedirectionTo3rdParty");
  pigeonResult.displayHints = [FLTDisplayHintsPaymentItem fromMap:GetNullableObject(dict, @"displayHints")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", (self.paymentMethod ? self.paymentMethod : [NSNull null]), @"paymentMethod", (self.paymentProductGroup ? self.paymentProductGroup : [NSNull null]), @"paymentProductGroup", (self.minAmount ? self.minAmount : [NSNull null]), @"minAmount", (self.maxAmount ? self.maxAmount : [NSNull null]), @"maxAmount", (self.allowsRecurring ? self.allowsRecurring : [NSNull null]), @"allowsRecurring", (self.allowsTokenization ? self.allowsTokenization : [NSNull null]), @"allowsTokenization", (self.usesRedirectionTo3rdParty ? self.usesRedirectionTo3rdParty : [NSNull null]), @"usesRedirectionTo3rdParty", (self.displayHints ? [self.displayHints toMap] : [NSNull null]), @"displayHints", nil];
}
@end

@implementation FLTDisplayHintsPaymentItem
+ (instancetype)makeWithDisplayOrder:(NSNumber *)displayOrder
    label:(NSString *)label
    logoUrl:(NSString *)logoUrl {
  FLTDisplayHintsPaymentItem* pigeonResult = [[FLTDisplayHintsPaymentItem alloc] init];
  pigeonResult.displayOrder = displayOrder;
  pigeonResult.label = label;
  pigeonResult.logoUrl = logoUrl;
  return pigeonResult;
}
+ (FLTDisplayHintsPaymentItem *)fromMap:(NSDictionary *)dict {
  FLTDisplayHintsPaymentItem *pigeonResult = [[FLTDisplayHintsPaymentItem alloc] init];
  pigeonResult.displayOrder = GetNullableObject(dict, @"displayOrder");
  NSAssert(pigeonResult.displayOrder != nil, @"");
  pigeonResult.label = GetNullableObject(dict, @"label");
  NSAssert(pigeonResult.label != nil, @"");
  pigeonResult.logoUrl = GetNullableObject(dict, @"logoUrl");
  NSAssert(pigeonResult.logoUrl != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.displayOrder ? self.displayOrder : [NSNull null]), @"displayOrder", (self.label ? self.label : [NSNull null]), @"label", (self.logoUrl ? self.logoUrl : [NSNull null]), @"logoUrl", nil];
}
@end

@implementation FLTPaymentProduct
+ (instancetype)makeWithId:(NSString *)id
    paymentMethod:(nullable NSString *)paymentMethod
    paymentProductGroup:(nullable NSString *)paymentProductGroup
    minAmount:(nullable NSNumber *)minAmount
    maxAmount:(nullable NSNumber *)maxAmount
    allowsRecurring:(nullable NSNumber *)allowsRecurring
    allowsTokenization:(nullable NSNumber *)allowsTokenization
    usesRedirectionTo3rdParty:(nullable NSNumber *)usesRedirectionTo3rdParty
    displayHints:(nullable FLTDisplayHintsPaymentItem *)displayHints
    fields:(NSArray<FLTPaymentProductField *> *)fields {
  FLTPaymentProduct* pigeonResult = [[FLTPaymentProduct alloc] init];
  pigeonResult.id = id;
  pigeonResult.paymentMethod = paymentMethod;
  pigeonResult.paymentProductGroup = paymentProductGroup;
  pigeonResult.minAmount = minAmount;
  pigeonResult.maxAmount = maxAmount;
  pigeonResult.allowsRecurring = allowsRecurring;
  pigeonResult.allowsTokenization = allowsTokenization;
  pigeonResult.usesRedirectionTo3rdParty = usesRedirectionTo3rdParty;
  pigeonResult.displayHints = displayHints;
  pigeonResult.fields = fields;
  return pigeonResult;
}
+ (FLTPaymentProduct *)fromMap:(NSDictionary *)dict {
  FLTPaymentProduct *pigeonResult = [[FLTPaymentProduct alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.paymentMethod = GetNullableObject(dict, @"paymentMethod");
  pigeonResult.paymentProductGroup = GetNullableObject(dict, @"paymentProductGroup");
  pigeonResult.minAmount = GetNullableObject(dict, @"minAmount");
  pigeonResult.maxAmount = GetNullableObject(dict, @"maxAmount");
  pigeonResult.allowsRecurring = GetNullableObject(dict, @"allowsRecurring");
  pigeonResult.allowsTokenization = GetNullableObject(dict, @"allowsTokenization");
  pigeonResult.usesRedirectionTo3rdParty = GetNullableObject(dict, @"usesRedirectionTo3rdParty");
  pigeonResult.displayHints = [FLTDisplayHintsPaymentItem fromMap:GetNullableObject(dict, @"displayHints")];
  pigeonResult.fields = GetNullableObject(dict, @"fields");
  NSAssert(pigeonResult.fields != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", (self.paymentMethod ? self.paymentMethod : [NSNull null]), @"paymentMethod", (self.paymentProductGroup ? self.paymentProductGroup : [NSNull null]), @"paymentProductGroup", (self.minAmount ? self.minAmount : [NSNull null]), @"minAmount", (self.maxAmount ? self.maxAmount : [NSNull null]), @"maxAmount", (self.allowsRecurring ? self.allowsRecurring : [NSNull null]), @"allowsRecurring", (self.allowsTokenization ? self.allowsTokenization : [NSNull null]), @"allowsTokenization", (self.usesRedirectionTo3rdParty ? self.usesRedirectionTo3rdParty : [NSNull null]), @"usesRedirectionTo3rdParty", (self.displayHints ? [self.displayHints toMap] : [NSNull null]), @"displayHints", (self.fields ? self.fields : [NSNull null]), @"fields", nil];
}
@end

@implementation FLTPaymentProductField
+ (instancetype)makeWithId:(NSString *)id
    type:(FLTType)type
    displayHints:(nullable FLTDisplayHintsProductFields *)displayHints
    dataRestrictions:(nullable FLTDataRestrictions *)dataRestrictions {
  FLTPaymentProductField* pigeonResult = [[FLTPaymentProductField alloc] init];
  pigeonResult.id = id;
  pigeonResult.type = type;
  pigeonResult.displayHints = displayHints;
  pigeonResult.dataRestrictions = dataRestrictions;
  return pigeonResult;
}
+ (FLTPaymentProductField *)fromMap:(NSDictionary *)dict {
  FLTPaymentProductField *pigeonResult = [[FLTPaymentProductField alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  pigeonResult.displayHints = [FLTDisplayHintsProductFields fromMap:GetNullableObject(dict, @"displayHints")];
  pigeonResult.dataRestrictions = [FLTDataRestrictions fromMap:GetNullableObject(dict, @"dataRestrictions")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", @(self.type), @"type", (self.displayHints ? [self.displayHints toMap] : [NSNull null]), @"displayHints", (self.dataRestrictions ? [self.dataRestrictions toMap] : [NSNull null]), @"dataRestrictions", nil];
}
@end

@implementation FLTDisplayHintsProductFields
+ (instancetype)makeWithAlwaysShow:(NSNumber *)alwaysShow
    obfuscate:(NSNumber *)obfuscate
    displayOrder:(NSNumber *)displayOrder
    label:(NSString *)label
    placeholderLabel:(NSString *)placeholderLabel
    link:(NSString *)link
    mask:(NSString *)mask
    preferredInputType:(FLTPreferredInputType)preferredInputType
    tooltip:(FLTTooltip *)tooltip
    formElement:(FLTFormElement *)formElement {
  FLTDisplayHintsProductFields* pigeonResult = [[FLTDisplayHintsProductFields alloc] init];
  pigeonResult.alwaysShow = alwaysShow;
  pigeonResult.obfuscate = obfuscate;
  pigeonResult.displayOrder = displayOrder;
  pigeonResult.label = label;
  pigeonResult.placeholderLabel = placeholderLabel;
  pigeonResult.link = link;
  pigeonResult.mask = mask;
  pigeonResult.preferredInputType = preferredInputType;
  pigeonResult.tooltip = tooltip;
  pigeonResult.formElement = formElement;
  return pigeonResult;
}
+ (FLTDisplayHintsProductFields *)fromMap:(NSDictionary *)dict {
  FLTDisplayHintsProductFields *pigeonResult = [[FLTDisplayHintsProductFields alloc] init];
  pigeonResult.alwaysShow = GetNullableObject(dict, @"alwaysShow");
  NSAssert(pigeonResult.alwaysShow != nil, @"");
  pigeonResult.obfuscate = GetNullableObject(dict, @"obfuscate");
  NSAssert(pigeonResult.obfuscate != nil, @"");
  pigeonResult.displayOrder = GetNullableObject(dict, @"displayOrder");
  NSAssert(pigeonResult.displayOrder != nil, @"");
  pigeonResult.label = GetNullableObject(dict, @"label");
  NSAssert(pigeonResult.label != nil, @"");
  pigeonResult.placeholderLabel = GetNullableObject(dict, @"placeholderLabel");
  NSAssert(pigeonResult.placeholderLabel != nil, @"");
  pigeonResult.link = GetNullableObject(dict, @"link");
  NSAssert(pigeonResult.link != nil, @"");
  pigeonResult.mask = GetNullableObject(dict, @"mask");
  NSAssert(pigeonResult.mask != nil, @"");
  pigeonResult.preferredInputType = [GetNullableObject(dict, @"preferredInputType") integerValue];
  pigeonResult.tooltip = [FLTTooltip fromMap:GetNullableObject(dict, @"tooltip")];
  NSAssert(pigeonResult.tooltip != nil, @"");
  pigeonResult.formElement = [FLTFormElement fromMap:GetNullableObject(dict, @"formElement")];
  NSAssert(pigeonResult.formElement != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.alwaysShow ? self.alwaysShow : [NSNull null]), @"alwaysShow", (self.obfuscate ? self.obfuscate : [NSNull null]), @"obfuscate", (self.displayOrder ? self.displayOrder : [NSNull null]), @"displayOrder", (self.label ? self.label : [NSNull null]), @"label", (self.placeholderLabel ? self.placeholderLabel : [NSNull null]), @"placeholderLabel", (self.link ? self.link : [NSNull null]), @"link", (self.mask ? self.mask : [NSNull null]), @"mask", @(self.preferredInputType), @"preferredInputType", (self.tooltip ? [self.tooltip toMap] : [NSNull null]), @"tooltip", (self.formElement ? [self.formElement toMap] : [NSNull null]), @"formElement", nil];
}
@end

@implementation FLTTooltip
+ (instancetype)makeWithImage:(NSString *)image
    label:(NSString *)label {
  FLTTooltip* pigeonResult = [[FLTTooltip alloc] init];
  pigeonResult.image = image;
  pigeonResult.label = label;
  return pigeonResult;
}
+ (FLTTooltip *)fromMap:(NSDictionary *)dict {
  FLTTooltip *pigeonResult = [[FLTTooltip alloc] init];
  pigeonResult.image = GetNullableObject(dict, @"image");
  NSAssert(pigeonResult.image != nil, @"");
  pigeonResult.label = GetNullableObject(dict, @"label");
  NSAssert(pigeonResult.label != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.image ? self.image : [NSNull null]), @"image", (self.label ? self.label : [NSNull null]), @"label", nil];
}
@end

@implementation FLTFormElement
+ (instancetype)makeWithType:(FLTListType)type
    valueMapping:(NSArray<FLTValueMap *> *)valueMapping {
  FLTFormElement* pigeonResult = [[FLTFormElement alloc] init];
  pigeonResult.type = type;
  pigeonResult.valueMapping = valueMapping;
  return pigeonResult;
}
+ (FLTFormElement *)fromMap:(NSDictionary *)dict {
  FLTFormElement *pigeonResult = [[FLTFormElement alloc] init];
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  pigeonResult.valueMapping = GetNullableObject(dict, @"valueMapping");
  NSAssert(pigeonResult.valueMapping != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.type), @"type", (self.valueMapping ? self.valueMapping : [NSNull null]), @"valueMapping", nil];
}
@end

@implementation FLTValueMap
+ (instancetype)makeWithValue:(NSString *)value
    displayElements:(NSArray<FLTPaymentProductFieldDisplayElement *> *)displayElements {
  FLTValueMap* pigeonResult = [[FLTValueMap alloc] init];
  pigeonResult.value = value;
  pigeonResult.displayElements = displayElements;
  return pigeonResult;
}
+ (FLTValueMap *)fromMap:(NSDictionary *)dict {
  FLTValueMap *pigeonResult = [[FLTValueMap alloc] init];
  pigeonResult.value = GetNullableObject(dict, @"value");
  NSAssert(pigeonResult.value != nil, @"");
  pigeonResult.displayElements = GetNullableObject(dict, @"displayElements");
  NSAssert(pigeonResult.displayElements != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", (self.displayElements ? self.displayElements : [NSNull null]), @"displayElements", nil];
}
@end

@implementation FLTPaymentProductFieldDisplayElement
+ (instancetype)makeWithId:(NSString *)id
    type:(FLTPaymentProductFieldDisplayElementType)type
    value:(NSString *)value {
  FLTPaymentProductFieldDisplayElement* pigeonResult = [[FLTPaymentProductFieldDisplayElement alloc] init];
  pigeonResult.id = id;
  pigeonResult.type = type;
  pigeonResult.value = value;
  return pigeonResult;
}
+ (FLTPaymentProductFieldDisplayElement *)fromMap:(NSDictionary *)dict {
  FLTPaymentProductFieldDisplayElement *pigeonResult = [[FLTPaymentProductFieldDisplayElement alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  pigeonResult.value = GetNullableObject(dict, @"value");
  NSAssert(pigeonResult.value != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", @(self.type), @"type", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation FLTDataRestrictions
+ (instancetype)makeWithIsRequired:(NSNumber *)isRequired
    validationRules:(NSArray<FLTAbstractValidationRule *> *)validationRules {
  FLTDataRestrictions* pigeonResult = [[FLTDataRestrictions alloc] init];
  pigeonResult.isRequired = isRequired;
  pigeonResult.validationRules = validationRules;
  return pigeonResult;
}
+ (FLTDataRestrictions *)fromMap:(NSDictionary *)dict {
  FLTDataRestrictions *pigeonResult = [[FLTDataRestrictions alloc] init];
  pigeonResult.isRequired = GetNullableObject(dict, @"isRequired");
  NSAssert(pigeonResult.isRequired != nil, @"");
  pigeonResult.validationRules = GetNullableObject(dict, @"validationRules");
  NSAssert(pigeonResult.validationRules != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isRequired ? self.isRequired : [NSNull null]), @"isRequired", (self.validationRules ? self.validationRules : [NSNull null]), @"validationRules", nil];
}
@end

@implementation FLTAbstractValidationRule
+ (instancetype)makeWithMessageId:(NSString *)messageId
    type:(FLTValidationType)type {
  FLTAbstractValidationRule* pigeonResult = [[FLTAbstractValidationRule alloc] init];
  pigeonResult.messageId = messageId;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (FLTAbstractValidationRule *)fromMap:(NSDictionary *)dict {
  FLTAbstractValidationRule *pigeonResult = [[FLTAbstractValidationRule alloc] init];
  pigeonResult.messageId = GetNullableObject(dict, @"messageId");
  NSAssert(pigeonResult.messageId != nil, @"");
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.messageId ? self.messageId : [NSNull null]), @"messageId", @(self.type), @"type", nil];
}
@end

@implementation FLTPaymentRequest
+ (instancetype)makeWithValues:(NSDictionary<NSString *, NSString *> *)values
    paymentProductId:(NSString *)paymentProductId
    tokenize:(NSNumber *)tokenize
    sessionId:(NSString *)sessionId {
  FLTPaymentRequest* pigeonResult = [[FLTPaymentRequest alloc] init];
  pigeonResult.values = values;
  pigeonResult.paymentProductId = paymentProductId;
  pigeonResult.tokenize = tokenize;
  pigeonResult.sessionId = sessionId;
  return pigeonResult;
}
+ (FLTPaymentRequest *)fromMap:(NSDictionary *)dict {
  FLTPaymentRequest *pigeonResult = [[FLTPaymentRequest alloc] init];
  pigeonResult.values = GetNullableObject(dict, @"values");
  NSAssert(pigeonResult.values != nil, @"");
  pigeonResult.paymentProductId = GetNullableObject(dict, @"paymentProductId");
  NSAssert(pigeonResult.paymentProductId != nil, @"");
  pigeonResult.tokenize = GetNullableObject(dict, @"tokenize");
  NSAssert(pigeonResult.tokenize != nil, @"");
  pigeonResult.sessionId = GetNullableObject(dict, @"sessionId");
  NSAssert(pigeonResult.sessionId != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.values ? self.values : [NSNull null]), @"values", (self.paymentProductId ? self.paymentProductId : [NSNull null]), @"paymentProductId", (self.tokenize ? self.tokenize : [NSNull null]), @"tokenize", (self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", nil];
}
@end

@implementation FLTPreparedPaymentRequest
+ (instancetype)makeWithEncryptedFields:(NSString *)encryptedFields
    encodedClientMetaInfo:(NSString *)encodedClientMetaInfo {
  FLTPreparedPaymentRequest* pigeonResult = [[FLTPreparedPaymentRequest alloc] init];
  pigeonResult.encryptedFields = encryptedFields;
  pigeonResult.encodedClientMetaInfo = encodedClientMetaInfo;
  return pigeonResult;
}
+ (FLTPreparedPaymentRequest *)fromMap:(NSDictionary *)dict {
  FLTPreparedPaymentRequest *pigeonResult = [[FLTPreparedPaymentRequest alloc] init];
  pigeonResult.encryptedFields = GetNullableObject(dict, @"encryptedFields");
  NSAssert(pigeonResult.encryptedFields != nil, @"");
  pigeonResult.encodedClientMetaInfo = GetNullableObject(dict, @"encodedClientMetaInfo");
  NSAssert(pigeonResult.encodedClientMetaInfo != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.encryptedFields ? self.encryptedFields : [NSNull null]), @"encryptedFields", (self.encodedClientMetaInfo ? self.encodedClientMetaInfo : [NSNull null]), @"encodedClientMetaInfo", nil];
}
@end

@interface FLTApiCodecReader : FlutterStandardReader
@end
@implementation FLTApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTAbstractValidationRule fromMap:[self readValue]];
    
    case 129:     
      return [FLTBasicPaymentProduct fromMap:[self readValue]];
    
    case 130:     
      return [FLTDataRestrictions fromMap:[self readValue]];
    
    case 131:     
      return [FLTDisplayHintsPaymentItem fromMap:[self readValue]];
    
    case 132:     
      return [FLTDisplayHintsProductFields fromMap:[self readValue]];
    
    case 133:     
      return [FLTFormElement fromMap:[self readValue]];
    
    case 134:     
      return [FLTGetPaymentProductRequest fromMap:[self readValue]];
    
    case 135:     
      return [FLTPaymentContextRequest fromMap:[self readValue]];
    
    case 136:     
      return [FLTPaymentContextResponse fromMap:[self readValue]];
    
    case 137:     
      return [FLTPaymentProduct fromMap:[self readValue]];
    
    case 138:     
      return [FLTPaymentProductField fromMap:[self readValue]];
    
    case 139:     
      return [FLTPaymentProductFieldDisplayElement fromMap:[self readValue]];
    
    case 140:     
      return [FLTPaymentRequest fromMap:[self readValue]];
    
    case 141:     
      return [FLTPreparedPaymentRequest fromMap:[self readValue]];
    
    case 142:     
      return [FLTSessionRequest fromMap:[self readValue]];
    
    case 143:     
      return [FLTSessionResponse fromMap:[self readValue]];
    
    case 144:     
      return [FLTTooltip fromMap:[self readValue]];
    
    case 145:     
      return [FLTValueMap fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTAbstractValidationRule class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTBasicPaymentProduct class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTDataRestrictions class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTDisplayHintsPaymentItem class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTDisplayHintsProductFields class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTFormElement class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTGetPaymentProductRequest class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPaymentContextRequest class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPaymentContextResponse class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPaymentProduct class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPaymentProductField class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPaymentProductFieldDisplayElement class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPaymentRequest class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPreparedPaymentRequest class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTSessionRequest class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTSessionResponse class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTTooltip class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTValueMap class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTApiCodecReaderWriter *readerWriter = [[FLTApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.createClientSession"
        binaryMessenger:binaryMessenger
        codec:FLTApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createClientSessionRequest:error:)], @"FLTApi api (%@) doesn't respond to @selector(createClientSessionRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTSessionRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTSessionResponse *output = [api createClientSessionRequest:arg_request error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.getBasicPaymentItems"
        binaryMessenger:binaryMessenger
        codec:FLTApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getBasicPaymentItemsRequest:completion:)], @"FLTApi api (%@) doesn't respond to @selector(getBasicPaymentItemsRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTPaymentContextRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        [api getBasicPaymentItemsRequest:arg_request completion:^(FLTPaymentContextResponse *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.getPaymentProduct"
        binaryMessenger:binaryMessenger
        codec:FLTApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPaymentProductRequest:completion:)], @"FLTApi api (%@) doesn't respond to @selector(getPaymentProductRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTGetPaymentProductRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        [api getPaymentProductRequest:arg_request completion:^(FLTPaymentProduct *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.preparePaymentRequest"
        binaryMessenger:binaryMessenger
        codec:FLTApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(preparePaymentRequestRequest:completion:)], @"FLTApi api (%@) doesn't respond to @selector(preparePaymentRequestRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTPaymentRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        [api preparePaymentRequestRequest:arg_request completion:^(FLTPreparedPaymentRequest *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
